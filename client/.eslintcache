[{"/Users/javipart/Develop/keybe/client/src/index.js":"1","/Users/javipart/Develop/keybe/client/src/reportWebVitals.js":"2","/Users/javipart/Develop/keybe/client/src/App.js":"3","/Users/javipart/Develop/keybe/client/src/pages/Index.js":"4","/Users/javipart/Develop/keybe/client/src/components/Form.js":"5","/Users/javipart/Develop/keybe/client/src/api/usersApi.js":"6","/Users/javipart/Develop/keybe/client/src/api/index.js":"7","/Users/javipart/Develop/keybe/client/src/api/roomsApi.js":"8","/Users/javipart/Develop/keybe/client/src/api/socketApi.js":"9","/Users/javipart/Develop/keybe/client/src/components/Chat.js":"10","/Users/javipart/Develop/keybe/client/src/models/events.js":"11","/Users/javipart/Develop/keybe/client/src/pages/Agent.js":"12","/Users/javipart/Develop/keybe/client/src/api/agentsApi.js":"13","/Users/javipart/Develop/keybe/client/src/components/CheckTicket.js":"14","/Users/javipart/Develop/keybe/client/src/api/ticketsApi.js":"15","/Users/javipart/Develop/keybe/client/src/components/AddTicket.js":"16","/Users/javipart/Develop/keybe/client/src/components/ListTickets.js":"17","/Users/javipart/Develop/keybe/client/src/components/ViewTicket.js":"18"},{"size":500,"mtime":1610496060130,"results":"19","hashOfConfig":"20"},{"size":362,"mtime":1610496060131,"results":"21","hashOfConfig":"20"},{"size":348,"mtime":1610990103459,"results":"22","hashOfConfig":"20"},{"size":5155,"mtime":1610995382959,"results":"23","hashOfConfig":"20"},{"size":1728,"mtime":1610663397421,"results":"24","hashOfConfig":"20"},{"size":157,"mtime":1610639805518,"results":"25","hashOfConfig":"20"},{"size":278,"mtime":1610639350016,"results":"26","hashOfConfig":"20"},{"size":437,"mtime":1610724113089,"results":"27","hashOfConfig":"20"},{"size":1016,"mtime":1610931644212,"results":"28","hashOfConfig":"20"},{"size":2214,"mtime":1610985675283,"results":"29","hashOfConfig":"20"},{"size":89,"mtime":1610720811633,"results":"30","hashOfConfig":"20"},{"size":11503,"mtime":1610991623465,"results":"31","hashOfConfig":"20"},{"size":154,"mtime":1610721576854,"results":"32","hashOfConfig":"20"},{"size":821,"mtime":1610991286934,"results":"33","hashOfConfig":"20"},{"size":428,"mtime":1610983128034,"results":"34","hashOfConfig":"20"},{"size":1655,"mtime":1610944470525,"results":"35","hashOfConfig":"20"},{"size":2170,"mtime":1610990692303,"results":"36","hashOfConfig":"20"},{"size":1948,"mtime":1610984621487,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"bpxtmh",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"40"},"/Users/javipart/Develop/keybe/client/src/index.js",[],["85","86"],"/Users/javipart/Develop/keybe/client/src/reportWebVitals.js",[],"/Users/javipart/Develop/keybe/client/src/App.js",[],"/Users/javipart/Develop/keybe/client/src/pages/Index.js",[],"/Users/javipart/Develop/keybe/client/src/components/Form.js",["87","88"],"import React, { useEffect, useState } from 'react';\n\nimport {\n  Button,\n  Grid,\n  TextField,\n} from '@material-ui/core';\n\nimport {\n  Send\n} from '@material-ui/icons';\n\nconst Form = ({ form, handleForm, saveForm }) => {\n\n\n  return (\n    <Grid\n      container\n      spacing={2}\n    >\n      <Grid\n        item xs={12}\n        sm container\n      >\n        <Grid item container direction='column' spacing={2}>\n          <Grid item xs>\n            <TextField\n              id={'name'}\n              label={'Nombre'}\n              value={form.name}\n              onChange={handleForm}\n              fullWidth\n            />\n            <Grid item xs>\n              <TextField\n                id={'lastName'}\n                label={'Apellido'}\n                value={form.lastName}\n                onChange={handleForm}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs>\n              <TextField\n                id={'doc'}\n                label={'Documento'}\n                value={form.id}\n                onChange={handleForm}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs>\n              <TextField\n                id={'phone'}\n                label={'Celular'}\n                value={form.phone}\n                onChange={handleForm}\n                fullWidth\n              />\n            </Grid>\n            <Grid item xs style={{ textAlign: 'right' }}>\n              <Button\n                endIcon={<Send />}\n                color=\"primary\"\n                onClick={saveForm}\n              >\n                Iniciar\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Form;","/Users/javipart/Develop/keybe/client/src/api/usersApi.js",["89"],"import { instance, apiGetData } from './index';\n\nexport default class {\n  static save(data) {\n    return instance.post('users', data).then(apiGetData);\n  }\n}","/Users/javipart/Develop/keybe/client/src/api/index.js",[],"/Users/javipart/Develop/keybe/client/src/api/roomsApi.js",["90"],"import { instance, apiGetData } from './index';\n\nexport default class {\n  static save(data) {\n    return instance.post('rooms', data).then(apiGetData);\n  }\n  static pushMessage(data) {\n    return instance.post('rooms/message', data).then(apiGetData);\n  }\n\n  static getAgentRooms(id) {\n    return instance.get(`rooms/${id}`).then(apiGetData);\n  }\n\n  static getRoom(id) {\n    return instance.get(`rooms/room/${id}`).then(apiGetData);\n  }\n}","/Users/javipart/Develop/keybe/client/src/api/socketApi.js",[],"/Users/javipart/Develop/keybe/client/src/components/Chat.js",["91","92","93","94"],"import React, { useEffect, useState } from 'react';\n\nimport io from 'socket.io-client';\n\nimport {\n  Button,\n  Grid,\n  IconButton,\n  ListItemText,\n  TextField,\n  List,\n  ListItem,\n  Paper,\n  makeStyles,\n  Divider,\n} from '@material-ui/core';\n\nimport {\n  Send\n} from '@material-ui/icons';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: '100%',\n    height: '80vh'\n  },\n  headBG: {\n    backgroundColor: '#e0e0e0'\n  },\n  borderRight500: {\n    borderRight: '1px solid #e0e0e0'\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  }\n});\n\nconst Chat = ({ idChat, idChatUser, message = {}, sendMessage, pushMessage, conversation }) => {\n  const [data, setData] = useState({\n    transmitter: idChatUser,\n    message: '',\n  });\n\n  const classes = useStyles();\n\n  const allMessages = conversation.map((item) => (\n    <ListItem>\n      <Grid container style={{ backgroundColor: idChatUser === item.transmitter ? '#FCE2DC' : '#DCEFFC' }}>\n        <Grid item xs={12}>\n          <ListItemText align={idChatUser === item.transmitter ? \"right\" : \"left\"} primary={item.message}></ListItemText>\n        </Grid>\n        <Grid item xs={12}>\n          <ListItemText align={idChatUser === item.transmitter ? \"left\" : \"right\"} secondary={item.date}></ListItemText>\n        </Grid>\n      </Grid>\n    </ListItem>\n  ));\n\n  return (\n    <>\n      <Grid item xs={12}>\n        <List className={classes.messageArea}>\n          {allMessages}\n        </List>\n      </Grid>\n      <Divider />\n      <Grid container style={{ padding: '5px' }}>\n        <Grid item xs={10}>\n          <TextField\n            id={'message'}\n            label={'Mensaje'}\n            value={data.message}\n            onChange={(e) =>\n              setData({ ...data, message: e.target.value })\n            }\n            fullWidth\n          />\n        </Grid>\n        <Grid xs={2} align=\"right\">\n          <IconButton\n            disabled={data.message === ''}\n            onClick={() => {\n              sendMessage({ id: idChat, data });\n              setData({ ...data, message: '' });\n            }}>\n            <Send />\n          </IconButton>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\nexport default Chat;","/Users/javipart/Develop/keybe/client/src/models/events.js",[],"/Users/javipart/Develop/keybe/client/src/pages/Agent.js",["95","96","97","98","99"],"import React, { useEffect, useMemo, useState } from 'react';\n\nimport {\n  Typography, Button, Fab,\n  Grid, Paper,\n  TextField, List, ListItem,\n  ListItemIcon, Avatar, ListItemText,\n  Divider,\n  IconButton,\n  ListItemSecondaryAction,\n  Dialog,\n  Badge,\n  Snackbar,\n  Container,\n  CssBaseline,\n} from '@material-ui/core';\n\nimport {\n  Send, PostAdd, LockOutlined,\n} from '@material-ui/icons';\nimport ListIcon from '@material-ui/icons/List';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport agentsApi from '../api/agentsApi';\nimport roomsApi from '../api/roomsApi';\nimport { disconnectSocket, initSocket, subscribeRooms, subscribeToChat } from '../api/socketApi';\nimport ticketsApi from '../api/ticketsApi';\nimport AddTicket from '../components/AddTicket';\nimport ListTickets from '../components/ListTickets';\n\nconst useStyles = makeStyles(theme => ({\n  table: {\n    minWidth: 650,\n  },\n  chatSection: {\n    width: '100%',\n    height: '80vh'\n  },\n  headBG: {\n    backgroundColor: '#e0e0e0'\n  },\n  borderRight500: {\n    borderRight: '1px solid #e0e0e0',\n    overflowY: 'auto'\n  },\n  messageArea: {\n    height: '70vh',\n    overflowY: 'auto'\n  },\n  roomsArea: {\n    height: '57vh',\n    overflowY: 'auto'\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Index = () => {\n  const [allRooms, setAllRooms] = useState([]);\n  const [idChat, setIdChat] = useState(false);\n  const [allMessages, setAllMessages] = useState([]);\n  const [agentDoc, setAgentDoc] = useState('');\n  const [agent, setAgent] = useState(null);\n  const [allUsers, setAllUsers] = useState([]);\n  const [alertMessage, setAlertMessage] = useState('');\n  const [showAlert, setShowAlert] = useState(false);\n  const [allTickets, setAllTickets] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [showListModal, setShowListModal] = useState(false);\n  const [newMessagees, setNewMessages] = useState([]);\n  const [error, setError] = useState('');\n  const [data, setData] = useState({\n    transmitter: '',\n    message: '',\n  });\n  const [dataTicket, setDataTicket] = useState({\n    userId: '',\n    userCreate: '',\n    userUpdate: '',\n    details: '',\n  });\n\n  const classes = useStyles();\n\n  const handleChange = (e) => {\n    const { value } = e.target;\n    setAgentDoc(value);\n  };\n\n  const agentLogin = () => {\n    agentsApi.get(agentDoc).then((result) => {\n      const { success, data: agent } = result;\n      if (agent) {\n        setAgent(agent);\n        setDataTicket({ ...dataTicket, userCreate: agent['_id'] });\n        ticketsApi.getAll(agent['_id'])\n          .then(result => {\n            const { data: tickets } = result;\n            const activeTickets = tickets\n              .filter(ticket => ticket.status === 'created');\n            setAllTickets(activeTickets);\n          });\n        roomsApi.getAgentRooms(agent['_id']).then((result) => {\n          const { success, data: rooms } = result;\n          setData({ ...data, transmitter: agent['_id'] });\n          const users = rooms.map(user => user.user);\n          setAllUsers(users);\n          setAllRooms(rooms);\n        })\n      } else {\n        setError('El Agente con ese documento no Existe')\n      }\n    })\n  }\n  let component = (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlined />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Iniciar Sesión\n        </Typography>\n        <form className={classes.form} noValidate>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            id={'doc'}\n            label={'Documento'}\n            value={agentDoc}\n            onChange={handleChange}\n            fullWidth\n          />\n          <Button\n            fullWidth\n            variant=\"contained\"\n            onClick={agentLogin}>\n            Ingresar\n        </Button>\n          {error ? <h3>{error}</h3> : ''}\n        </form>\n      </div>\n    </Container>\n  );\n\n  const pushMessage = (data) => {\n    setAllMessages(messages => [...messages, data]);\n    if (data.transmitter !== agent['_id']) {\n      setAlertMessage('Nuevo Mensaje Recibido');\n      setShowAlert(true);\n    }\n  };\n\n  const pushRoom = (data) => {\n    setAllRooms(rooms => [...rooms, data]);\n  };\n\n  useEffect(() => {\n    if (idChat) {\n      initSocket();\n      subscribeToChat(idChat, pushMessage);\n      setNewMessages(ids => [...ids, idChat]);\n      return () => {\n        disconnectSocket();\n      };\n    }\n  }, [idChat]);\n\n  useEffect(() => {\n    initSocket();\n    subscribeRooms(pushRoom);\n    return () => {\n      disconnectSocket();\n    };\n  }, []);\n\n  const sendMessage = (dataMessage) => {\n    roomsApi.pushMessage(dataMessage).then(() => {\n      setData({ ...data, message: '' });\n    });\n  };\n\n  const saveTicket = () => {\n    ticketsApi.save(dataTicket).then(() => {\n      setShowModal(false);\n      ticketsApi.getAll(agent['_id'])\n        .then(result => {\n          const { data: tickets } = result;\n          const activeTickets = tickets\n            .filter(ticket => ticket.status === 'created')\n          setAllTickets(activeTickets);\n          setAlertMessage('Creación Correcta del Ticket');\n          setShowAlert(true);\n          setDataTicket({\n            userId: '',\n            userCreate: '',\n            userUpdate: '',\n            details: '',\n          })\n        });\n    })\n  };\n\n  const updateTicket = (data) => {\n    const { id } = data;\n    ticketsApi.update(id, data).then(() => {\n      ticketsApi.getAll(agent['_id'])\n        .then(result => {\n          const { data: tickets } = result;\n          const activeTickets = tickets\n            .filter(ticket => ticket.status === 'created')\n          setAllTickets(activeTickets);\n          setAlertMessage('Actualización Correcta del Tickets');\n          setShowAlert(true);\n        });\n    });\n  };\n\n  useMemo(() => {\n    if (idChat) {\n      roomsApi.getRoom(idChat).then((result) => {\n        const { success, data } = result;\n        setAllMessages(data.chat)\n        const ids = newMessagees.filter(id => id !== idChat);\n        setNewMessages(ids);\n      });\n    }\n  }, [idChat])\n\n  return (\n    <div>\n      {agent ?\n        <>\n          <Grid container>\n            <Grid item xs={12} >\n              <Typography variant=\"h5\" className=\"header-message\">Agente</Typography>\n            </Grid>\n          </Grid>\n          <Grid container component={Paper} className={classes.chatSection}>\n            <Grid item xs={5} className={classes.borderRight500}>\n              <List>\n                <ListItem button key=\"RemySharp\">\n                  <ListItemIcon>\n                    <Avatar alt=\"Remy Sharp\" src=\"https://material-ui.com/static/images/avatar/1.jpg\" />\n                  </ListItemIcon>\n                  <ListItemText primary={agent.name}></ListItemText>\n                  <ListItemSecondaryAction>\n                    Crear Ticket\n                    <IconButton onClick={() => setShowModal(true)}>\n                      <PostAdd />\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                </ListItem>\n              </List>\n              <Divider />\n              <Grid item xs={12} style={{ padding: '10px' }}>\n                Listado de tickets\n                <IconButton onClick={() => setShowListModal(true)}>\n                  <ListIcon />\n                </IconButton>\n              </Grid>\n              <Divider />\n              <List className={classes.roomsArea}>\n                {allRooms.map((item, index) => (\n                  <ListItem button key={item['_id']} onClick={() => setIdChat(item['_id'])}>\n                    <ListItemIcon>\n                      <Badge variant={'dot'} color={newMessagees.includes(item['_id']) ? 'secondary' : ''}>\n                        <Avatar alt=\"img\" src={`https://material-ui.com/static/images/avatar/${index + 2}.jpg`} />\n                      </Badge>\n                    </ListItemIcon>\n                    <ListItemText primary={`${item.user.name} ${item.user.lastName}`}>{`${item.user.name} $${item.user.lastName}`}</ListItemText>\n                  </ListItem>\n                ))}\n              </List>\n            </Grid>\n            <Grid item xs={7}>\n              <List className={classes.messageArea}>\n                {allMessages.map((item, index) => {\n                  const time = new Date(item.date);\n                  const timeMessage = `${time.getUTCHours()}:${time.getUTCMinutes()}`\n                  return (\n                    <ListItem key={index}>\n                      <Grid container style={{ backgroundColor: agent['_id'] === item.transmitter ? '#FCE2DC' : '#DCEFFC' }}>\n                        <Grid item xs={12}>\n                          <ListItemText align={agent['_id'] === item.transmitter ? \"right\" : \"left\"} primary={item.message}></ListItemText>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <ListItemText align={agent['_id'] === item.transmitter ? \"left\" : \"right\"} secondary={timeMessage}></ListItemText>\n                        </Grid>\n                      </Grid>\n                    </ListItem>\n                  );\n                })}\n              </List>\n              <Divider />\n              <Grid container style={{ padding: '5px' }}>\n                <Grid item xs={11}>\n                  <TextField\n                    id=\"outlined-basic-email\"\n                    label=\"Mensaje\"\n                    fullWidth\n                    disabled={!idChat}\n                    value={data.message}\n                    onChange={(e) =>\n                      setData({ ...data, message: e.target.value })\n                    } />\n                </Grid>\n                <Grid xs={1} align=\"right\">\n                  <Fab\n                    disabled={data.message === ''}\n                    color=\"primary\"\n                    aria-label=\"add\"\n                    onClick={() => sendMessage({\n                      id: idChat,\n                      data,\n                    })}><Send /></Fab>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </>\n        : component}\n      <Dialog\n        id={'add'}\n        open={showModal}\n        onClose={() => setShowModal(false)}\n      >\n        <AddTicket\n          users={allUsers}\n          setDataTicket={setDataTicket}\n          dataTicket={dataTicket}\n          saveTicket={saveTicket}\n          setShowModal={setShowModal}\n        />\n      </Dialog>\n      <Dialog\n        id={'list'}\n        open={showListModal}\n        onClose={() => setShowListModal(false)}\n      >\n        <ListTickets\n          agent={agent}\n          allTickets={allTickets}\n          updateTicket={updateTicket}\n          setShowListModal={setShowListModal}\n          allUsers={allUsers}\n        />\n      </Dialog>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        message={alertMessage}\n        open={showAlert}\n        autoHideDuration={3000}\n        onClose={() => setShowAlert(false)}\n      >\n      </Snackbar>\n    </div>\n  );\n}\n\nexport default Index;","/Users/javipart/Develop/keybe/client/src/api/agentsApi.js",["100"],"import { instance, apiGetData } from './index';\n\nexport default class {\n  static get(id) {\n    return instance.get(`agents/${id}`).then(apiGetData);\n  }\n}","/Users/javipart/Develop/keybe/client/src/components/CheckTicket.js",["101","102"],"import React, { useEffect, useState } from 'react';\n\nimport {\n  IconButton,\n  Grid,\n  TextField,\n} from '@material-ui/core';\n\nimport {\n  Search,\n  Send\n} from '@material-ui/icons';\n\nconst CheckTicket = ({ findTicket, error }) => {\n  const [numberTicket, setNumberTicket] = useState('');\n  return (\n    <Grid container spacing={'1'}>\n      <Grid item xs={10}>\n        <TextField\n          id={'ticket'}\n          label={'Número de Ticket'}\n          value={numberTicket}\n          onChange={(e) => setNumberTicket(e.target.value)}\n          fullWidth\n        />\n      </Grid>\n      <Grid item xs={2}>\n        <IconButton\n          disabled={!numberTicket}\n          onClick={() => findTicket(numberTicket)}\n        >\n          <Search />\n        </IconButton>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default CheckTicket;","/Users/javipart/Develop/keybe/client/src/api/ticketsApi.js",["103"],"import { instance, apiGetData } from './index';\n\nexport default class {\n  static save(data) {\n    return instance.post('tickets', data).then(apiGetData);\n  }\n  static getAll(id) {\n    return instance.get(`tickets/${id}`).then(apiGetData);\n  }\n  static update(id, data) {\n    return instance.put(`tickets/${id}`, data).then(apiGetData);\n  }\n  static get(id) {\n    return instance.get(`tickets/byid/${id}`).then(apiGetData);\n  }\n}","/Users/javipart/Develop/keybe/client/src/components/AddTicket.js",["104","105"],"import React, { useEffect, useState } from 'react';\n\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  MenuItem,\n  Select,\n  TextField,\n} from '@material-ui/core';\n\nimport {\n  Save\n} from '@material-ui/icons';\n\nconst AddTicket = ({ users, setDataTicket, dataTicket, saveTicket, setShowModal }) => {\n  const [userSelect, setUserSelect] = useState({});\n\n  return (\n    <>\n      <DialogTitle>\n        Crear Ticket\n      </DialogTitle>\n      <DialogContent>\n        <DialogContentText>\n          Dligencia el formulario para crear un ticket\n        </DialogContentText>\n        <Select\n          id={'userId'}\n          value={userSelect.name}\n          fullWidth\n          onChange={(e) => {\n            const user = users.filter(user => user['_id'] === e.target.value).shift();\n            setUserSelect(user);\n            setDataTicket({ ...dataTicket, userId: user['_id'] })\n          }}\n        >\n          {users.map(user => (\n            <MenuItem\n              value={user['_id']}>\n              {`${user.name} ${user.lastName}`}\n            </MenuItem>\n          ))}\n        </Select>\n        <TextField\n          id={'details'}\n          label={'Detalles'}\n          value={dataTicket.details}\n          onChange={(e) =>\n            setDataTicket({ ...dataTicket, details: e.target.value })\n          }\n          fullWidth\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setShowModal(false)}>\n          Cancelar\n        </Button>\n        <Button onClick={saveTicket}>\n          Guardar\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nexport default AddTicket;\n","/Users/javipart/Develop/keybe/client/src/components/ListTickets.js",[],"/Users/javipart/Develop/keybe/client/src/components/ViewTicket.js",["106","107","108"],"import React, { useEffect, useState } from 'react';\n\nimport {\n  Button,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Grid,\n  Typography,\n  Divider,\n} from '@material-ui/core';\n\nconst ViewTicket = ({ setShowModal, ticket }) => {\n\n  return (\n    <>\n      <DialogTitle>\n        Ticket\n      </DialogTitle>\n      <DialogContent>\n        <Grid container>\n          <Grid item xs={4}>\n            <Typography variant=\"h6\" className=\"header-message\">ID</Typography>\n          </Grid>\n          <Grid item xs={8}>\n            <Typography variant=\"h5\" className=\"header-message\">{ticket['_id']}</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant=\"h6\" className=\"header-message\">Estado</Typography>\n          </Grid>\n          <Grid item xs={8}>\n            <Typography variant=\"h5\" className=\"header-message\">{ticket.status}</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant=\"h6\" className=\"header-message\">Creado por</Typography>\n          </Grid>\n          <Grid item xs={8}>\n            <Typography variant=\"h5\" className=\"header-message\">{ticket.userCreate}</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant=\"h6\" className=\"header-message\">Actualizado Por </Typography>\n          </Grid>\n          <Grid item xs={8}>\n            <Typography variant=\"h5\" className=\"header-message\">{ticket.userUpdate}</Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <Typography variant=\"h6\" className=\"header-message\">Detalles</Typography>\n          </Grid>\n          <Grid item xs={8}>\n            <Typography variant=\"h5\" className=\"header-message\">{ticket.details}</Typography>\n          </Grid>\n        </Grid>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={() => setShowModal(false)}>\n          Aceptar\n        </Button>\n      </DialogActions>\n    </>\n  );\n}\n\nexport default ViewTicket;\n",{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"117","line":1,"column":28,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"118","severity":1,"message":"119","line":3,"column":1,"nodeType":"120","endLine":7,"endColumn":2},{"ruleId":"118","severity":1,"message":"119","line":3,"column":1,"nodeType":"120","endLine":18,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"121","line":3,"column":8,"nodeType":"115","messageId":"116","endLine":3,"endColumn":10},{"ruleId":"113","severity":1,"message":"122","line":6,"column":3,"nodeType":"115","messageId":"116","endLine":6,"endColumn":9},{"ruleId":"113","severity":1,"message":"123","line":13,"column":3,"nodeType":"115","messageId":"116","endLine":13,"endColumn":8},{"ruleId":"113","severity":1,"message":"124","line":107,"column":15,"nodeType":"115","messageId":"116","endLine":107,"endColumn":22},{"ruleId":"113","severity":1,"message":"124","line":119,"column":19,"nodeType":"115","messageId":"116","endLine":119,"endColumn":26},{"ruleId":"125","severity":1,"message":"126","line":183,"column":6,"nodeType":"127","endLine":183,"endColumn":14,"suggestions":"128"},{"ruleId":"113","severity":1,"message":"124","line":238,"column":17,"nodeType":"115","messageId":"116","endLine":238,"endColumn":24},{"ruleId":"125","severity":1,"message":"129","line":244,"column":6,"nodeType":"127","endLine":244,"endColumn":14,"suggestions":"130"},{"ruleId":"118","severity":1,"message":"119","line":3,"column":1,"nodeType":"120","endLine":7,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"131","line":11,"column":3,"nodeType":"115","messageId":"116","endLine":11,"endColumn":7},{"ruleId":"118","severity":1,"message":"119","line":3,"column":1,"nodeType":"120","endLine":16,"endColumn":2},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"132","line":15,"column":3,"nodeType":"115","messageId":"116","endLine":15,"endColumn":7},{"ruleId":"113","severity":1,"message":"114","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"117","line":1,"column":28,"nodeType":"115","messageId":"116","endLine":1,"endColumn":36},{"ruleId":"113","severity":1,"message":"133","line":10,"column":3,"nodeType":"115","messageId":"116","endLine":10,"endColumn":10},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous class","ExportDefaultDeclaration","'io' is defined but never used.","'Button' is defined but never used.","'Paper' is defined but never used.","'success' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pushMessage'. Either include it or remove the dependency array.","ArrayExpression",["136"],"React Hook useMemo has a missing dependency: 'newMessagees'. Either include it or remove the dependency array.",["137"],"'Send' is defined but never used.","'Save' is defined but never used.","'Divider' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"138","fix":"139"},{"desc":"140","fix":"141"},"Update the dependencies array to be: [idChat, pushMessage]",{"range":"142","text":"143"},"Update the dependencies array to be: [idChat, newMessagees]",{"range":"144","text":"145"},[4838,4846],"[idChat, pushMessage]",[6481,6489],"[idChat, newMessagees]"]